'use strict';

process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';
process.env.FAST_REFRESH = true;

const fs = require('fs');
const chalk = require('react-dev-utils/chalk');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const { prepareProxy, prepareUrls } = require('react-dev-utils/WebpackDevServerUtils');

const configFactory = require('../config/webpack.config');
const createDevServerConfig = require('../config/webpackDevServer.config');
const log = require('../utils/logger').logger;
const createCompiler = require('../config/create-compiler');
const events = require('events');

module.exports = async (userDir, startPort, masterPort, watch) => {
	const paths = require('../config/paths')(userDir);
	const useYarn = fs.existsSync(paths.yarnLockFile);

	const HOST = '0.0.0.0';
	const config = configFactory('development', userDir);
	const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
	const appName = require(paths.appPackageJson).name;

	const useTypeScript = fs.existsSync(paths.appTsConfig);
	const urls = prepareUrls(protocol, HOST, startPort, paths.publicUrlOrPath.slice(0, -1));
	urls.lanUrlForTerminal = urls.lanUrlForTerminal.replace(startPort, masterPort) + '/';
	urls.localUrlForBrowser = urls.localUrlForBrowser.replace(startPort, masterPort) + '/';
	urls.localUrlForTerminal = urls.localUrlForTerminal.replace(startPort, masterPort) + '/';

	// Create a webpack compiler that is configured with custom messages.
	process.chdir(userDir);
	const compiler = createCompiler({
		appName,
		config,
		urls,
		useYarn,
		useTypeScript,
		webpack,
		watch
	});
	// Load proxy config
	const proxySetting = require(paths.appPackageJson).proxy;
	const proxyConfig = prepareProxy(proxySetting, paths.appPublic, paths.publicUrlOrPath);
	// Serve webpack assets generated by the compiler over a web server.
	const serverConfig = {
		...createDevServerConfig(proxyConfig, urls.lanUrlForConfig, userDir, watch),
		host: HOST,
		port: startPort,
		setupExitSignals: false
	};
	const devServer = new WebpackDevServer(serverConfig, compiler);
	log(chalk.cyan('Starting the development server...\n'));
	// Launch WebpackDevServer.
	await devServer.start();

	const eventListener = new events.EventEmitter();
	eventListener.on('close', async () => {
		await devServer.stop();
	});

	if (process.env.CI !== 'true') {
		// Gracefully exit when stdin ends
		process.stdin.on('end', devServer.stop);
	}

	return {
		eventListener: eventListener,
		urls
	};
};
