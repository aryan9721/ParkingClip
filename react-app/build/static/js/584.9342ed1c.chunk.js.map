{"version":3,"file":"static/js/584.9342ed1c.chunk.js","mappings":"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","sources":["components/cards/statistics/AnalyticEcommerce.js","pages/api/index.js","pages/dashboard/IncomeAreaChart.js","pages/dashboard/index.js"],"sourcesContent":["import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Chip, Grid, Stack, Typography } from '@mui/material';\r\n\r\n// project import\r\nimport MainCard from '../../../components/MainCard';\r\n\r\n// assets\r\n// import { RiseOutlined, FallOutlined } from '@ant-design/icons';\r\n\r\n// ==============================|| STATISTICS - ECOMMERCE CARD  ||============================== //\r\n\r\nconst AnalyticEcommerce = ({ color, title, count, percentage, isLoss, extra }) => (\r\n    <MainCard contentSX={{ p: 2.25 }}>\r\n        <Stack spacing={0.5}>\r\n            <Typography variant=\"h6\" color=\"textSecondary\">\r\n                {title}\r\n            </Typography>\r\n            <Grid container alignItems=\"center\">\r\n                <Grid item>\r\n                    <Typography variant=\"h4\" color=\"inherit\">\r\n                        {count}\r\n                    </Typography>\r\n                </Grid>\r\n                {percentage && (\r\n                    <Grid item>\r\n                        <Chip\r\n                            variant=\"combined\"\r\n                            color={color}\r\n                            // icon={\r\n                            //     <>\r\n                            //         {!isLoss && <RiseOutlined style={{ fontSize: '0.75rem', color: 'inherit' }} />}\r\n                            //         {isLoss && <FallOutlined style={{ fontSize: '0.75rem', color: 'inherit' }} />}\r\n                            //     </>\r\n                            // }\r\n                            label={`${percentage}%`}\r\n                            sx={{ ml: 1.25, pl: 1 }}\r\n                            size=\"small\"\r\n                        />\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n        </Stack>\r\n        {/* <Box sx={{ pt: 2.25 }}>\r\n            <Typography variant=\"caption\" color=\"textSecondary\">\r\n                You made an extra{' '}\r\n                <Typography component=\"span\" variant=\"caption\" sx={{ color: `${color || 'primary'}.main` }}>\r\n                    {extra}\r\n                </Typography>{' '}\r\n                this year\r\n            </Typography>\r\n        </Box> */}\r\n    </MainCard>\r\n);\r\n\r\nAnalyticEcommerce.propTypes = {\r\n    color: PropTypes.string,\r\n    title: PropTypes.string,\r\n    count: PropTypes.string,\r\n    percentage: PropTypes.number,\r\n    isLoss: PropTypes.bool,\r\n    extra: PropTypes.oneOfType([PropTypes.node, PropTypes.string])\r\n};\r\n\r\nAnalyticEcommerce.defaultProps = {\r\n    color: 'primary'\r\n};\r\n\r\nexport default AnalyticEcommerce;\r\n","// const baseURL = 'https://parking-management-service-804561330.development.catalystserverless.com/server/parking-management-service/';\r\n// const baseURL = 'http://localhost:5001/';\r\nconst baseURL = '/server/parking-management-service/';\r\n// const baseURL = 'http://parking-clip.com/server/parking-management-service/';\r\n// const baseURL = 'http://192.168.0.103:5001/';\r\n// const baseURL = 'http://localhost:3000/server/parking-management-service/';\r\nexport default baseURL;","import PropTypes from 'prop-types';\r\nimport { useState, useEffect } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// third-party\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport axios from \"axios\";\r\nimport api from '../api';\r\n\r\n// chart options\r\nconst areaChartOptions = {\r\n    chart: {\r\n        height: 450,\r\n        type: 'area',\r\n        toolbar: {\r\n            show: false\r\n        }\r\n    },\r\n    dataLabels: {\r\n        enabled: false\r\n    },\r\n    stroke: {\r\n        curve: 'smooth',\r\n        width: 2\r\n    },\r\n    grid: {\r\n        strokeDashArray: 0\r\n    }\r\n};\r\n\r\n// ==============================|| INCOME AREA CHART ||============================== //\r\n\r\nconst IncomeAreaChart = ({ slot }) => {\r\n    const theme = useTheme();\r\n    const { primary, secondary } = theme.palette.text;\r\n    const line = theme.palette.divider;\r\n    const [options, setOptions] = useState(areaChartOptions);\r\n    const [series, setSeries] = useState([{ name: 'Tickets Generated', data: [0, 86, 28, 115, 48, 210, 136] }]);\r\n    const [loading, setLoading] = useState(true);\r\n    const baseURL = api + \"api/parkings/vehicle/tickets?limit=10000\";\r\n    const [Tickets, setTickets] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getTickets();\r\n    }, []);\r\n\r\n    const getTickets = () => {\r\n        try {\r\n            axios.get(baseURL).then((response) => {\r\n                // console.log('tickets',response.data.data.data);\r\n                setTickets(response.data.data.data);\r\n            });\r\n        } catch (error) {\r\n            // console.log('error',error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (Tickets) {\r\n            const countByDate = {};\r\n            const daysArray = [];\r\n            const countArray = [];\r\n            const countByMonth = {};\r\n            const monthsArray = [];\r\n\r\n            // Create a new Date object for the current date\r\n            const currentDate = new Date();\r\n\r\n            // Array of weekdays to map the day index returned by getDay()\r\n            const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n            if (slot === 'month') {\r\n                const currentDate = new Date();\r\n\r\n                // Array of months to map the month index returned by getMonth()\r\n                const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n\r\n                // Loop through the last 12 months\r\n                for (let i = 0; i < 12; i++) {\r\n                    const date = new Date(currentDate.getFullYear(), currentDate.getMonth() - i, 1);\r\n                    const monthOfYear = months[date.getMonth()];\r\n                    monthsArray.unshift(monthOfYear);\r\n\r\n                    countByMonth[monthOfYear] = 0; // Initialize the count to 0\r\n                }\r\n\r\n                // Loop through the array of tickets and increment the count for each month\r\n                Tickets.forEach(ticket => {\r\n                    const date = new Date(ticket.entryDateTime);\r\n                    const monthOfYear = months[date.getMonth()];\r\n                    if (countByMonth[monthOfYear] !== undefined) {\r\n                        countByMonth[monthOfYear]++;\r\n                    }\r\n                });\r\n\r\n                // Loop through the monthsArray and populate the countArray with the respective counts\r\n                monthsArray.forEach(month => {\r\n                    countArray.push(countByMonth[month]);\r\n                });\r\n\r\n                // console.log(monthsArray);\r\n                // console.log(countArray);\r\n            } else {\r\n                // Loop through the last 6 days\r\n                for (let i = 0; i < 7; i++) {\r\n                    const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() - i);\r\n                    const dayOfWeek = weekdays[date.getDay()];\r\n                    daysArray.unshift(dayOfWeek);\r\n\r\n                    countByDate[dayOfWeek] = 0; // Initialize the count to 0\r\n                }\r\n\r\n                // Loop through the array of tickets and increment the count for each date\r\n                Tickets.forEach(ticket => {\r\n                    const date = new Date(ticket.entryDateTime);\r\n                    const dayOfWeek = weekdays[date.getDay()];\r\n                    if (countByDate[dayOfWeek] !== undefined) {\r\n                        countByDate[dayOfWeek]++;\r\n                    }\r\n                });\r\n\r\n                // Loop through the daysArray and populate the countArray with the respective counts\r\n                daysArray.forEach(day => {\r\n                    countArray.push(countByDate[day]);\r\n                });\r\n\r\n                // console.log(daysArray);\r\n                // console.log(countArray);\r\n\r\n            }\r\n\r\n            setSeries([\r\n                {\r\n                    name: slot === 'month' ? 'Tickets Generated' : 'Tickets Generated (Last 7 days)',\r\n                    data: countArray\r\n                }\r\n            ]);\r\n            setOptions((prevState) => ({\r\n                ...prevState,\r\n                colors: [theme.palette.primary.main, theme.palette.primary[700]],\r\n                xaxis: {\r\n                    categories:\r\n                        slot === 'month'\r\n                            ? monthsArray\r\n                            : daysArray,\r\n                    labels: {\r\n                        style: {\r\n                            colors: [\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary\r\n                            ]\r\n                        }\r\n                    },\r\n                    axisBorder: {\r\n                        show: true,\r\n                        color: line\r\n                    },\r\n                    tickAmount: slot === 'month' ? 11 : 7\r\n                },\r\n                yaxis: {\r\n                    labels: {\r\n                        style: {\r\n                            colors: [secondary]\r\n                        }\r\n                    }\r\n                },\r\n                grid: {\r\n                    borderColor: line\r\n                },\r\n                tooltip: {\r\n                    theme: 'light'\r\n                }\r\n            }));\r\n\r\n            setLoading(false);\r\n        }\r\n    }, [slot, Tickets]);\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return <ReactApexChart options={options} series={series} type=\"area\" height={450} />;\r\n};\r\n\r\n\r\nIncomeAreaChart.propTypes = {\r\n    slot: PropTypes.string\r\n};\r\n\r\nexport default IncomeAreaChart;\r\n","import { useState, useEffect } from 'react';\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport menuItem from '../../menu-items';\r\n\r\n// material-ui\r\nimport {\r\n    // Avatar,\r\n    // AvatarGroup,\r\n    Box,\r\n    Button,\r\n    Grid,\r\n    // List,\r\n    // ListItemAvatar,\r\n    // ListItemButton,\r\n    // ListItemSecondaryAction,\r\n    // ListItemText,\r\n    // MenuItem,\r\n    Stack,\r\n    // TextField,\r\n    Typography\r\n} from '@mui/material';\r\n\r\n// project import\r\n// import OrdersTable from './OrdersTable';\r\nimport IncomeAreaChart from './IncomeAreaChart';\r\n// import MonthlyBarChart from './MonthlyBarChart';\r\n// import piechart from './piechart';\r\n// import ReportAreaChart from './ReportAreaChart';\r\n// import SalesColumnChart from './SalesColumnChart';\r\nimport MainCard from '../../components/MainCard';\r\nimport AnalyticEcommerce from '../../components/cards/statistics/AnalyticEcommerce';\r\nimport { useNavigate } from 'react-router';\r\nimport axios from \"axios\";\r\nimport api from '../api';\r\n// assets\r\n// import { GiftOutlined, MessageOutlined, SettingOutlined } from '@ant-design/icons';\r\n// import avatar1 from 'assets/images/users/avatar-1.png';\r\n// import avatar2 from 'assets/images/users/avatar-2.png';\r\n// import avatar3 from 'assets/images/users/avatar-3.png';\r\n// import avatar4 from 'assets/images/users/avatar-4.png';\r\n\r\n// // avatar style\r\n// const avatarSX = {\r\n//     width: 36,\r\n//     height: 36,\r\n//     fontSize: '1rem'\r\n// };\r\n\r\n// // action style\r\n// const actionSX = {\r\n//     mt: 0.75,\r\n//     ml: 1,\r\n//     top: 'auto',\r\n//     right: 'auto',\r\n//     alignSelf: 'flex-start',\r\n//     transform: 'none'\r\n// };\r\n\r\n// sales report status\r\n// const status = [\r\n//     {\r\n//         value: 'today',\r\n//         label: 'Today'\r\n//     },\r\n//     {\r\n//         value: 'month',\r\n//         label: 'This Month'\r\n//     },\r\n//     {\r\n//         value: 'year',\r\n//         label: 'This Year'\r\n//     }\r\n// ];\r\n\r\n// ==============================|| DASHBOARD - DEFAULT ||============================== //\r\n\r\n\r\nconst DashboardDefault = () => {\r\n    const navigate = useNavigate();\r\n    const [Tickets, setTickets] = useState([]);\r\n\r\n    const userdata = JSON.parse(localStorage.getItem('userdata'));\r\n    useEffect(() => {\r\n        if (userdata.role === \"ADMIN\") {\r\n          navigate('/AdminDashboard');\r\n        }\r\n        if (userdata.role === \"BUSINESS_OWNER\") {\r\n          navigate('/BusinessDashboard');\r\n        }\r\n      }, [userdata.role]);\r\n    \r\n    // console.log(userdata);\r\n    const [results, setresults] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getresults();\r\n    }, []);\r\n    //get todo list from database\r\n    const getresults = () => {\r\n        try {\r\n            console.log(api + 'api/businesses/' + userdata.businessId);\r\n            axios.get(api + 'api/businesses/' + userdata.businessId).then((response) => {\r\n                // console.log('reponse',response);\r\n                setresults(response.data.data.locations);\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n    // console.log(results);\r\n    const locationData = results.find((location1) => location1.name === userdata.location);\r\n    // console.log(locationData);\r\n\r\n    let totalCapacity = 0;\r\n\r\n    if (locationData) {\r\n\r\n        for (let i = 0; i < locationData.vehicleDetails.length; i++) {\r\n            totalCapacity += parseInt(locationData.vehicleDetails[i].capacity);\r\n        }\r\n        //   console.log(totalCapacity);\r\n    }\r\n    const baseURL =\r\n        api + \"api/parkings/vehicle/tickets?limit=10000\";\r\n\r\n    useEffect(() => {\r\n        getTickets();\r\n    }, []);\r\n\r\n    const getTickets = () => {\r\n        try {\r\n            axios.get(baseURL).then((response) => {\r\n                //   console.log('tickets',response.data.data.data);\r\n                setTickets(response.data.data.data);\r\n            });\r\n        } catch (error) {\r\n            // console.log('error',error);\r\n        }\r\n    };\r\n    // const [value, setValue] = useState('today');\r\n    const [slot, setSlot] = useState('week');\r\n    var token = localStorage.getItem('token');\r\n    if (!token) {\r\n        navigate('/app');\r\n    }\r\n    // console.log(locationData.vehicleDetails);\r\n    const counts = {};\r\n    let totalcount = 0;\r\n    if (Tickets) {\r\n        for (let vehicle of Tickets) {\r\n            if(vehicle.parkingStatus === 'PARKED')\r\n            {\r\n                totalcount++;\r\n                if (counts[vehicle.vehicleType]) {\r\n                    counts[vehicle.vehicleType]++;\r\n                } else {\r\n                    counts[vehicle.vehicleType] = 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // console.log(Tickets);\r\n\r\n    return (\r\n        <Grid container rowSpacing={4.5} columnSpacing={2.75}>\r\n            {/* row 1 */}\r\n            <Grid item xs={12} sx={{ mb: -2.25 }}>\r\n                <Typography variant=\"h5\">Dashboard</Typography>\r\n            </Grid>\r\n            {/* <Grid item xs={12} sm={6} md={4} lg={4}>\r\n                <AnalyticEcommerce title=\"Total Vacant Slots\" count=\"5000 / 10000\" percentage={50} />\r\n            </Grid> */}\r\n            {/* <Grid item xs={12} sx={{ mb: -2.25 }}> */}\r\n\r\n            {locationData && counts && locationData.vehicleDetails.map((vehicle, index) => (\r\n                <Grid item xs={12} sm={6} md={4} lg={4} key={index}>\r\n                    <AnalyticEcommerce title={`${vehicle.type}`} count={`${counts[vehicle.type] ? counts[vehicle.type] : 0}  / ${vehicle.capacity}`}\r\n                    // percentage={(counts[vehicle.type]?counts[vehicle.type]:0)*100/(vehicle.capacity)} \r\n                    />\r\n                </Grid>\r\n            ))}\r\n            {/* </Grid> */}\r\n            {/* <Grid item xs={12} sm={6} md={4} lg={4}>\r\n                <AnalyticEcommerce title=\"Total Occupied Slots\" count=\"5000\" percentage={50} />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6} md={4} lg={4}>\r\n                <AnalyticEcommerce title=\"Total Slots\" count=\"10000\" />\r\n            </Grid> */}\r\n            {/* <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                <AnalyticEcommerce title=\"Total Sales\" count=\"₹35,078\" percentage={27.4} isLoss color=\"warning\" extra=\"₹20,395\" />\r\n            </Grid> */}\r\n            <br></br>\r\n            <Grid item md={8} sx={{ display: { sm: 'none', md: 'block', lg: 'none' } }} />\r\n\r\n            {/* row 2 */}\r\n            <Grid item xs={12} md={7} lg={8}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                    <Grid item>\r\n                        <Typography variant=\"h5\">Tickets Generated</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Stack direction=\"row\" alignItems=\"center\" spacing={0}>\r\n                            <Button\r\n                                size=\"small\"\r\n                                onClick={() => setSlot('month')}\r\n                                color={slot === 'month' ? 'primary' : 'secondary'}\r\n                                variant={slot === 'month' ? 'outlined' : 'text'}\r\n                            >\r\n                                Month\r\n                            </Button>\r\n                            <Button\r\n                                size=\"small\"\r\n                                onClick={() => setSlot('week')}\r\n                                color={slot === 'week' ? 'primary' : 'secondary'}\r\n                                variant={slot === 'week' ? 'outlined' : 'text'}\r\n                            >\r\n                                Week\r\n                            </Button>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n                <MainCard content={false} sx={{ mt: 1.5 }}>\r\n                    <Box sx={{ pt: 1, pr: 2 }}>\r\n                        <IncomeAreaChart slot={slot} />\r\n                    </Box>\r\n                </MainCard>\r\n            </Grid>\r\n            <Grid item xs={12} md={5} lg={4}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                    <Grid item>\r\n                        <Typography variant=\"h5\">Parking Slots Report</Typography>\r\n                    </Grid>\r\n                    <Grid item />\r\n                </Grid>\r\n\r\n                <MainCard sx={{ mt: 2 }} content={false}>\r\n                    {totalCapacity && (<Box sx={{ p: 3, pb: 0 }}>\r\n                        <Stack spacing={2}>\r\n                            <Typography variant=\"h6\" color=\"textSecondary\">\r\n                                Currently\r\n                            </Typography>\r\n                            <Typography variant=\"h3\">{totalcount}/{totalCapacity}</Typography>\r\n                        </Stack>\r\n                    </Box>)}\r\n                                       <div id=\"chart\" style={{ marginBottom: 20 }}>\r\n                        <ReactApexChart options={{ labels: ['Occupied', 'Vacant'], legend: { position: 'bottom' } }} series={[totalcount, totalCapacity - totalcount]} type=\"pie\" width={350} />\r\n                    </div>\r\n\r\n                </MainCard>\r\n            </Grid>\r\n\r\n            {/* row 3 */}\r\n            {/* <Grid item xs={12} md={7} lg={8}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                    <Grid item>\r\n                        <Typography variant=\"h5\">Recent Orders</Typography>\r\n                    </Grid>\r\n                    <Grid item />\r\n                </Grid>\r\n                <MainCard sx={{ mt: 2 }} content={false}>\r\n                    <OrdersTable />\r\n                </MainCard>\r\n            </Grid>\r\n            <Grid item xs={12} md={5} lg={4}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                    <Grid item>\r\n                        <Typography variant=\"h5\">Analytics Report</Typography>\r\n                    </Grid>\r\n                    <Grid item />\r\n                </Grid>\r\n                <MainCard sx={{ mt: 2 }} content={false}>\r\n                    <List sx={{ p: 0, '& .MuiListItemButton-root': { py: 2 } }}>\r\n                        <ListItemButton divider>\r\n                            <ListItemText primary=\"Company Finance Growth\" />\r\n                            <Typography variant=\"h5\">+45.14%</Typography>\r\n                        </ListItemButton>\r\n                        <ListItemButton divider>\r\n                            <ListItemText primary=\"Company Expenses Ratio\" />\r\n                            <Typography variant=\"h5\">0.58%</Typography>\r\n                        </ListItemButton>\r\n                        <ListItemButton>\r\n                            <ListItemText primary=\"Business Risk Cases\" />\r\n                            <Typography variant=\"h5\">Low</Typography>\r\n                        </ListItemButton>\r\n                    </List>\r\n                    <ReportAreaChart />\r\n                </MainCard>\r\n            </Grid> */}\r\n\r\n            {/* row 4 */}\r\n            {/* <Grid item xs={12} md={7} lg={8}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                    <Grid item>\r\n                        <Typography variant=\"h5\">Sales Report</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <TextField\r\n                            id=\"standard-select-currency\"\r\n                            size=\"small\"\r\n                            select\r\n                            value={value}\r\n                            onChange={(e) => setValue(e.target.value)}\r\n                            sx={{ '& .MuiInputBase-input': { py: 0.5, fontSize: '0.875rem' } }}\r\n                        >\r\n                            {status.map((option) => (\r\n                                <MenuItem key={option.value} value={option.value}>\r\n                                    {option.label}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                    </Grid>\r\n                </Grid>\r\n                <MainCard sx={{ mt: 1.75 }}>\r\n                    <Stack spacing={1.5} sx={{ mb: -12 }}>\r\n                        <Typography variant=\"h6\" color=\"secondary\">\r\n                            Net Profit\r\n                        </Typography>\r\n                        <Typography variant=\"h4\">₹1560</Typography>\r\n                    </Stack>\r\n                    <SalesColumnChart />\r\n                </MainCard>\r\n            </Grid>\r\n            <Grid item xs={12} md={5} lg={4}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                    <Grid item>\r\n                        <Typography variant=\"h5\">Transaction History</Typography>\r\n                    </Grid>\r\n                    <Grid item />\r\n                </Grid>\r\n                <MainCard sx={{ mt: 2 }} content={false}>\r\n                    <List\r\n                        component=\"nav\"\r\n                        sx={{\r\n                            px: 0,\r\n                            py: 0,\r\n                            '& .MuiListItemButton-root': {\r\n                                py: 1.5,\r\n                                '& .MuiAvatar-root': avatarSX,\r\n                                '& .MuiListItemSecondaryAction-root': { ...actionSX, position: 'relative' }\r\n                            }\r\n                        }}\r\n                    >\r\n                        <ListItemButton divider>\r\n                            <ListItemAvatar>\r\n                                <Avatar\r\n                                    sx={{\r\n                                        color: 'success.main',\r\n                                        bgcolor: 'success.lighter'\r\n                                    }}\r\n                                >\r\n                                    <GiftOutlined />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText primary={<Typography variant=\"subtitle1\">Order #002434</Typography>} secondary=\"Today, 2:00 AM\" />\r\n                            <ListItemSecondaryAction>\r\n                                <Stack alignItems=\"flex-end\">\r\n                                    <Typography variant=\"subtitle1\" noWrap>\r\n                                        + ₹1,430\r\n                                    </Typography>\r\n                                    <Typography variant=\"h6\" color=\"secondary\" noWrap>\r\n                                        78%\r\n                                    </Typography>\r\n                                </Stack>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItemButton>\r\n                        <ListItemButton divider>\r\n                            <ListItemAvatar>\r\n                                <Avatar\r\n                                    sx={{\r\n                                        color: 'primary.main',\r\n                                        bgcolor: 'primary.lighter'\r\n                                    }}\r\n                                >\r\n                                    <MessageOutlined />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText\r\n                                primary={<Typography variant=\"subtitle1\">Order #984947</Typography>}\r\n                                secondary=\"5 August, 1:45 PM\"\r\n                            />\r\n                            <ListItemSecondaryAction>\r\n                                <Stack alignItems=\"flex-end\">\r\n                                    <Typography variant=\"subtitle1\" noWrap>\r\n                                        + ₹302\r\n                                    </Typography>\r\n                                    <Typography variant=\"h6\" color=\"secondary\" noWrap>\r\n                                        8%\r\n                                    </Typography>\r\n                                </Stack>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItemButton>\r\n                        <ListItemButton>\r\n                            <ListItemAvatar>\r\n                                <Avatar\r\n                                    sx={{\r\n                                        color: 'error.main',\r\n                                        bgcolor: 'error.lighter'\r\n                                    }}\r\n                                >\r\n                                    <SettingOutlined />\r\n                                </Avatar>\r\n                            </ListItemAvatar>\r\n                            <ListItemText primary={<Typography variant=\"subtitle1\">Order #988784</Typography>} secondary=\"7 hours ago\" />\r\n                            <ListItemSecondaryAction>\r\n                                <Stack alignItems=\"flex-end\">\r\n                                    <Typography variant=\"subtitle1\" noWrap>\r\n                                        + ₹682\r\n                                    </Typography>\r\n                                    <Typography variant=\"h6\" color=\"secondary\" noWrap>\r\n                                        16%\r\n                                    </Typography>\r\n                                </Stack>\r\n                            </ListItemSecondaryAction>\r\n                        </ListItemButton>\r\n                    </List>\r\n                </MainCard>\r\n                <MainCard sx={{ mt: 2 }}>\r\n                    <Stack spacing={3}>\r\n                        <Grid container justifyContent=\"space-between\" alignItems=\"center\">\r\n                            <Grid item>\r\n                                <Stack>\r\n                                    <Typography variant=\"h5\" noWrap>\r\n                                        Help & Support Chat\r\n                                    </Typography>\r\n                                    <Typography variant=\"caption\" color=\"secondary\" noWrap>\r\n                                        Typical replay within 5 min\r\n                                    </Typography>\r\n                                </Stack>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <AvatarGroup sx={{ '& .MuiAvatar-root': { width: 32, height: 32 } }}>\r\n                                    <Avatar alt=\"Remy Sharp\" src={avatar1} />\r\n                                    <Avatar alt=\"Travis Howard\" src={avatar2} />\r\n                                    <Avatar alt=\"Cindy Baker\" src={avatar3} />\r\n                                    <Avatar alt=\"Agnes Walker\" src={avatar4} />\r\n                                </AvatarGroup>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Button size=\"small\" variant=\"contained\" sx={{ textTransform: 'capitalize' }}>\r\n                            Need Help?\r\n                        </Button>\r\n                    </Stack>\r\n                </MainCard>\r\n            </Grid> */}\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default DashboardDefault;\r\n"],"names":["AnalyticEcommerce","_ref","color","title","count","percentage","isLoss","extra","_jsx","MainCard","contentSX","p","children","_jsxs","Stack","spacing","Typography","variant","Grid","container","alignItems","item","Chip","label","concat","sx","ml","pl","size","defaultProps","areaChartOptions","chart","height","type","toolbar","show","dataLabels","enabled","stroke","curve","width","grid","strokeDashArray","slot","theme","useTheme","_theme$palette$text","palette","text","secondary","primary","line","divider","_useState","useState","_useState2","_slicedToArray","options","setOptions","_useState3","name","data","_useState4","series","setSeries","_useState5","_useState6","loading","setLoading","baseURL","api","_useState7","_useState8","Tickets","setTickets","useEffect","getTickets","axios","then","response","error","countByDate","daysArray","countArray","countByMonth","monthsArray","currentDate","Date","weekdays","months","i","date","getFullYear","getMonth","monthOfYear","unshift","forEach","ticket","entryDateTime","undefined","month","push","getDate","dayOfWeek","getDay","day","prevState","_objectSpread","colors","main","xaxis","categories","labels","style","axisBorder","tickAmount","yaxis","borderColor","tooltip","ReactApexChart","navigate","useNavigate","userdata","JSON","parse","localStorage","getItem","role","results","setresults","getresults","console","log","businessId","locations","locationData","find","location1","location","totalCapacity","vehicleDetails","length","parseInt","capacity","setSlot","counts","totalcount","_step","_iterator","_createForOfIteratorHelper","s","n","done","vehicle","value","parkingStatus","vehicleType","err","e","f","rowSpacing","columnSpacing","xs","mb","map","index","sm","md","lg","display","justifyContent","direction","Button","onClick","content","mt","Box","pt","pr","IncomeAreaChart","pb","id","marginBottom","legend","position"],"sourceRoot":""}