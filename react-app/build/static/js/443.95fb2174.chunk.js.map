{"version":3,"file":"static/js/443.95fb2174.chunk.js","mappings":"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","sources":["components/cards/statistics/AnalyticEcommerce.js","pages/BusinessDashboard/IncomeAreaChart.js","pages/BusinessDashboard/BusinessChart.js","pages/BusinessDashboard/index.js","pages/api/index.js"],"sourcesContent":["import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Chip, Grid, Stack, Typography } from '@mui/material';\r\n\r\n// project import\r\nimport MainCard from '../../../components/MainCard';\r\n\r\n// assets\r\n// import { RiseOutlined, FallOutlined } from '@ant-design/icons';\r\n\r\n// ==============================|| STATISTICS - ECOMMERCE CARD  ||============================== //\r\n\r\nconst AnalyticEcommerce = ({ color, title, count, percentage, isLoss, extra }) => (\r\n    <MainCard contentSX={{ p: 2.25 }}>\r\n        <Stack spacing={0.5}>\r\n            <Typography variant=\"h6\" color=\"textSecondary\">\r\n                {title}\r\n            </Typography>\r\n            <Grid container alignItems=\"center\">\r\n                <Grid item>\r\n                    <Typography variant=\"h4\" color=\"inherit\">\r\n                        {count}\r\n                    </Typography>\r\n                </Grid>\r\n                {percentage && (\r\n                    <Grid item>\r\n                        <Chip\r\n                            variant=\"combined\"\r\n                            color={color}\r\n                            // icon={\r\n                            //     <>\r\n                            //         {!isLoss && <RiseOutlined style={{ fontSize: '0.75rem', color: 'inherit' }} />}\r\n                            //         {isLoss && <FallOutlined style={{ fontSize: '0.75rem', color: 'inherit' }} />}\r\n                            //     </>\r\n                            // }\r\n                            label={`${percentage}%`}\r\n                            sx={{ ml: 1.25, pl: 1 }}\r\n                            size=\"small\"\r\n                        />\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n        </Stack>\r\n        {/* <Box sx={{ pt: 2.25 }}>\r\n            <Typography variant=\"caption\" color=\"textSecondary\">\r\n                You made an extra{' '}\r\n                <Typography component=\"span\" variant=\"caption\" sx={{ color: `${color || 'primary'}.main` }}>\r\n                    {extra}\r\n                </Typography>{' '}\r\n                this year\r\n            </Typography>\r\n        </Box> */}\r\n    </MainCard>\r\n);\r\n\r\nAnalyticEcommerce.propTypes = {\r\n    color: PropTypes.string,\r\n    title: PropTypes.string,\r\n    count: PropTypes.string,\r\n    percentage: PropTypes.number,\r\n    isLoss: PropTypes.bool,\r\n    extra: PropTypes.oneOfType([PropTypes.node, PropTypes.string])\r\n};\r\n\r\nAnalyticEcommerce.defaultProps = {\r\n    color: 'primary'\r\n};\r\n\r\nexport default AnalyticEcommerce;\r\n","import PropTypes from 'prop-types';\r\nimport { useState, useEffect } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// third-party\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport axios from \"axios\";\r\nimport api from '../api';\r\n\r\n// chart options\r\nconst areaChartOptions = {\r\n    chart: {\r\n        height: 450,\r\n        type: 'area',\r\n        toolbar: {\r\n            show: false\r\n        }\r\n    },\r\n    dataLabels: {\r\n        enabled: false\r\n    },\r\n    stroke: {\r\n        curve: 'smooth',\r\n        width: 2\r\n    },\r\n    grid: {\r\n        strokeDashArray: 0\r\n    }\r\n};\r\n\r\n// ==============================|| INCOME AREA CHART ||============================== //\r\n\r\nconst IncomeAreaChart = ({ slot, location }) => {\r\n    // console.log(slot,location);\r\n    const theme = useTheme();\r\n    const { primary, secondary } = theme.palette.text;\r\n    const line = theme.palette.divider;\r\n    const [options, setOptions] = useState(areaChartOptions);\r\n    const [series, setSeries] = useState([{ name: 'Tickets Generated', data: [0, 86, 28, 115, 48, 210, 136] }]);\r\n    const [loading, setLoading] = useState(true);\r\n    const baseURL = api + \"api/parkings/vehicle/tickets?fromDate=Tue Feb 14 2023 15:09:20 GMT+0530 (India Standard Time)&toDate=Sun Apr 20 2023 13:56:18 GMT+0530 (India Standard Time)&limit=10000&location=\"+location;\r\n    // console.log(baseURL);\r\n    const [Tickets, setTickets] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getTickets();\r\n    }, [location]);\r\n\r\n    const getTickets = () => {\r\n        try {\r\n            axios.get(baseURL).then((response) => {\r\n                // console.log('tickets',response);\r\n                setTickets(response.data.data.data);\r\n            });\r\n        } catch (error) {\r\n            // console.log('error',error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (Tickets) {\r\n            const countByDate = {};\r\n            const daysArray = [];\r\n            const countArray = [];\r\n            const countByMonth = {};\r\n            const monthsArray = [];\r\n\r\n            // Create a new Date object for the current date\r\n            const currentDate = new Date();\r\n\r\n            // Array of weekdays to map the day index returned by getDay()\r\n            const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n            if (slot === 'month') {\r\n                const currentDate = new Date();\r\n\r\n                // Array of months to map the month index returned by getMonth()\r\n                const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n\r\n                // Loop through the last 12 months\r\n                for (let i = 0; i < 12; i++) {\r\n                    const date = new Date(currentDate.getFullYear(), currentDate.getMonth() - i, 1);\r\n                    const monthOfYear = months[date.getMonth()];\r\n                    monthsArray.unshift(monthOfYear);\r\n\r\n                    countByMonth[monthOfYear] = 0; // Initialize the count to 0\r\n                }\r\n\r\n                // Loop through the array of tickets and increment the count for each month\r\n                Tickets.forEach(ticket => {\r\n                    const date = new Date(ticket.entryDateTime);\r\n                    const monthOfYear = months[date.getMonth()];\r\n                    if (countByMonth[monthOfYear] !== undefined) {\r\n                        countByMonth[monthOfYear]++;\r\n                    }\r\n                });\r\n\r\n                // Loop through the monthsArray and populate the countArray with the respective counts\r\n                monthsArray.forEach(month => {\r\n                    countArray.push(countByMonth[month]);\r\n                });\r\n\r\n                // console.log(monthsArray);\r\n                // console.log(countArray);\r\n            } else {\r\n                // Loop through the last 6 days\r\n                for (let i = 0; i < 7; i++) {\r\n                    const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() - i);\r\n                    const dayOfWeek = weekdays[date.getDay()];\r\n                    daysArray.unshift(dayOfWeek);\r\n\r\n                    countByDate[dayOfWeek] = 0; // Initialize the count to 0\r\n                }\r\n\r\n                // Loop through the array of tickets and increment the count for each date\r\n                Tickets.forEach(ticket => {\r\n                    const date = new Date(ticket.entryDateTime);\r\n                    const dayOfWeek = weekdays[date.getDay()];\r\n                    if (countByDate[dayOfWeek] !== undefined) {\r\n                        countByDate[dayOfWeek]++;\r\n                    }\r\n                });\r\n\r\n                // Loop through the daysArray and populate the countArray with the respective counts\r\n                daysArray.forEach(day => {\r\n                    countArray.push(countByDate[day]);\r\n                });\r\n\r\n                // console.log(daysArray);\r\n                // console.log(countArray);\r\n\r\n            }\r\n\r\n            setSeries([\r\n                {\r\n                    name: slot === 'month' ? 'Tickets Generated' : 'Tickets Generated (Last 7 days)',\r\n                    data: countArray\r\n                }\r\n            ]);\r\n            setOptions((prevState) => ({\r\n                ...prevState,\r\n                colors: [theme.palette.primary.main, theme.palette.primary[700]],\r\n                xaxis: {\r\n                    categories:\r\n                        slot === 'month'\r\n                            ? monthsArray\r\n                            : daysArray,\r\n                    labels: {\r\n                        style: {\r\n                            colors: [\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary\r\n                            ]\r\n                        }\r\n                    },\r\n                    axisBorder: {\r\n                        show: true,\r\n                        color: line\r\n                    },\r\n                    tickAmount: slot === 'month' ? 11 : 7\r\n                },\r\n                yaxis: {\r\n                    labels: {\r\n                        style: {\r\n                            colors: [secondary]\r\n                        }\r\n                    }\r\n                },\r\n                grid: {\r\n                    borderColor: line\r\n                },\r\n                tooltip: {\r\n                    theme: 'light'\r\n                }\r\n            }));\r\n\r\n            setLoading(false);\r\n        }\r\n    }, [slot, Tickets]);\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return <ReactApexChart options={options} series={series} type=\"area\" height={450} />;\r\n};\r\n\r\n\r\nIncomeAreaChart.propTypes = {\r\n    slot: PropTypes.string\r\n};\r\n\r\nexport default IncomeAreaChart;\r\n","import PropTypes from 'prop-types';\r\nimport { useState, useEffect } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// third-party\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport axios from \"axios\";\r\nimport api from '../api';\r\n\r\n// chart options\r\nconst areaChartOptions = {\r\n    chart: {\r\n        height: 450,\r\n        type: 'area',\r\n        toolbar: {\r\n            show: false\r\n        }\r\n    },\r\n    dataLabels: {\r\n        enabled: false\r\n    },\r\n    stroke: {\r\n        curve: 'smooth',\r\n        width: 2\r\n    },\r\n    grid: {\r\n        strokeDashArray: 0\r\n    }\r\n};\r\n\r\n// ==============================|| INCOME AREA CHART ||============================== //\r\n\r\nconst BusinessChart = ({ slot, location }) => {\r\n    // console.log(slot,location);\r\n    const theme = useTheme();\r\n    const { primary, secondary } = theme.palette.text;\r\n    const line = theme.palette.divider;\r\n    const [options, setOptions] = useState(areaChartOptions);\r\n    const [series, setSeries] = useState([{ name: 'Revenue Generated', data: [0, 86, 28, 115, 48, 210, 136] }]);\r\n    const [loading, setLoading] = useState(true);\r\n    const data = JSON.parse(localStorage.getItem('userdata'));\r\n    const RevenueURL =\r\n    api +\r\n    \"api/businesses/revenue/\"+data.userId+\"?location=\" +\r\n    location;\r\n  // console.log(RevenueURL);\r\n  const [Revenue, setRevenue] = useState([]);\r\n  useEffect(() => {\r\n    getRevenue();\r\n  }, [location]);\r\n\r\n  const getRevenue = async () => {\r\n    try {\r\n      await axios.get(RevenueURL).then((response) => {\r\n        // console.log('revuenue',response);\r\n        if (response.data.message === \"No Records Found!\") {\r\n          setRevenue(response.data.data);\r\n        } else {\r\n          setRevenue(response.data.data);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log('error', error);\r\n    }\r\n  };\r\n\r\n    useEffect(() => {\r\n        // console.log('revuenue',Revenue);\r\n        if (Revenue) {\r\n            const countByDate = {};\r\n            const daysArray = [];\r\n            const countArray = [];\r\n            const countByMonth = {};\r\n            const monthsArray = [];\r\n\r\n            // Create a new Date object for the current date\r\n            const currentDate = new Date();\r\n\r\n            // Array of weekdays to map the day index returned by getDay()\r\n            const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n            if (slot === 'month') {\r\n                const currentDate = new Date();\r\n\r\n                // Array of months to map the month index returned by getMonth()\r\n                const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n\r\n                // Loop through the last 12 months\r\n                for (let i = 0; i < 12; i++) {\r\n                    const date = new Date(currentDate.getFullYear(), currentDate.getMonth() - i, 1);\r\n                    const monthOfYear = months[date.getMonth()];\r\n                    monthsArray.unshift(monthOfYear);\r\n\r\n                    countByMonth[monthOfYear] = 0; // Initialize the count to 0\r\n                }\r\n                // Loop through the array of BusinessChart and increment the count for each month\r\n                Revenue.forEach(ticket => {\r\n                    // const dateString = '19-3-2023';\r\n                    const dateParts = ticket.date.split('-');\r\n                    const month = parseInt(dateParts[1]) - 1; // JavaScript months are zero-indexed\r\n                    // console.log(month); // Output: 2 (March)\r\n                    const monthOfYear = months[month];\r\n                    if (countByMonth[monthOfYear] !== undefined) {\r\n                        countByMonth[monthOfYear]+=ticket.totalAmount;\r\n                    }\r\n                });\r\n\r\n                // Loop through the monthsArray and populate the countArray with the respective counts\r\n                monthsArray.forEach(month => {\r\n                    countArray.push(countByMonth[month]);\r\n                });\r\n\r\n                // console.log(monthsArray);\r\n                // console.log(countArray);\r\n            } else {\r\n                // Loop through the last 6 days\r\n                // console.log(Revenue);\r\n                for (let i = 0; i < 7; i++) {\r\n                    const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() - i);\r\n                    const dayOfWeek = weekdays[date.getDay()];\r\n                    daysArray.unshift(dayOfWeek);\r\n\r\n                    if(Revenue[i]) countByDate[dayOfWeek] = Revenue[i].totalAmount;\r\n                    else countByDate[dayOfWeek] = 0 // Initialize the count to 0\r\n                }\r\n                // console.log(countByDate);\r\n                // Loop through the array of Revenue and increment the count for each date\r\n                // Revenue.forEach(ticket => {\r\n                //     console.log(ticket.day);\r\n                //     console.log(ticket.totalAmount);\r\n                //     // const date = new Date(ticket.date);\r\n                //     // console.log(date);\r\n                //     // const dayOfWeek = weekdays[date.getDay()];\r\n                //     // console.log(dayOfWeek);\r\n                //     if (countByDate[ticket.day] !== undefined) {\r\n                //         countByDate[ticket.day]+=ticket.totalAmount;\r\n                //     }\r\n                // });\r\n                // console.log(countByDate);\r\n                // // Loop through the daysArray and populate the countArray with the respective counts\r\n                daysArray.forEach(day => {\r\n                    countArray.push(countByDate[day]);\r\n                });\r\n\r\n                // console.log(daysArray);\r\n                // console.log(countArray);\r\n\r\n            }\r\n\r\n            setSeries([\r\n                {\r\n                    name: slot === 'month' ? 'Revenue Generated' : 'Revenue Generated (Last 7 days)',\r\n                    data: countArray\r\n                }\r\n            ]);\r\n            setOptions((prevState) => ({\r\n                ...prevState,\r\n                colors: [theme.palette.primary.main, theme.palette.primary[700]],\r\n                xaxis: {\r\n                    categories:\r\n                        slot === 'month'\r\n                            ? monthsArray\r\n                            : daysArray,\r\n                    labels: {\r\n                        style: {\r\n                            colors: [\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary\r\n                            ]\r\n                        }\r\n                    },\r\n                    axisBorder: {\r\n                        show: true,\r\n                        color: line\r\n                    },\r\n                    tickAmount: slot === 'month' ? 11 : 7\r\n                },\r\n                yaxis: {\r\n                    labels: {\r\n                        style: {\r\n                            colors: [secondary]\r\n                        }\r\n                    }\r\n                },\r\n                grid: {\r\n                    borderColor: line\r\n                },\r\n                tooltip: {\r\n                    theme: 'light'\r\n                }\r\n            }));\r\n\r\n            setLoading(false);\r\n        }\r\n    }, [slot, Revenue]);\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return <ReactApexChart options={options} series={series} type=\"area\" height={450} />;\r\n};\r\n\r\n\r\nBusinessChart.propTypes = {\r\n    slot: PropTypes.string\r\n};\r\n\r\nexport default BusinessChart;\r\n","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport api from '../api';\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport menuItem from '../../menu-items';\r\n\r\n// material-ui\r\nimport {\r\n\r\n    Box,\r\n    Button,\r\n    Grid,\r\n\r\n    Stack,\r\n    // TextField,\r\n    Typography\r\n} from '@mui/material';\r\n\r\n\r\nimport IncomeAreaChart from './IncomeAreaChart';\r\nimport BusinessChart from './BusinessChart';\r\n\r\nimport MainCard from '../../components/MainCard';\r\nimport AnalyticEcommerce from '../../components/cards/statistics/AnalyticEcommerce';\r\n\r\n// assets\r\n// import { GiftOutlined, MessageOutlined, SettingOutlined } from '@ant-design/icons';\r\n// import avatar1 from 'assets/images/users/avatar-1.png';\r\n// import avatar2 from 'assets/images/users/avatar-2.png';\r\n// import avatar3 from 'assets/images/users/avatar-3.png';\r\n// import avatar4 from 'assets/images/users/avatar-4.png';\r\n\r\n// // avatar style\r\n// const avatarSX = {\r\n//     width: 36,\r\n//     height: 36,\r\n//     fontSize: '1rem'\r\n// };\r\n\r\n// // action style\r\n// const actionSX = {\r\n//     mt: 0.75,\r\n//     ml: 1,\r\n//     top: 'auto',\r\n//     right: 'auto',\r\n//     alignSelf: 'flex-start',\r\n//     transform: 'none'\r\n// };\r\n\r\n// sales report status\r\n// const status = [\r\n//     {\r\n//         value: 'today',\r\n//         label: 'Today'\r\n//     },\r\n//     {\r\n//         value: 'month',\r\n//         label: 'This Month'\r\n//     },\r\n//     {\r\n//         value: 'year',\r\n//         label: 'This Year'\r\n//     }\r\n// ];\r\n\r\n// ==============================|| DASHBOARD - DEFAULT ||============================== //\r\n\r\nconst BusinessDashboard = () => {\r\n    const [slot, setSlot] = useState('week');\r\n    const data = JSON.parse(localStorage.getItem('userdata'));\r\n    const [locations, setlocations] = useState([]);\r\n    const [location, setlocation] = useState('no location found');\r\n    const [counts, setCounts] = useState({});\r\n    let [totalcount, settotalcount] =  useState(0);\r\n    const handlelocation = (event) => {\r\n      const location = event.target.value;\r\n      setlocation(location);\r\n    };\r\n    let [totalRevenue, settotalRevenue]=useState(0);\r\n\r\n    useEffect(() => {\r\n      getlocations();\r\n    }, []);\r\n  \r\n    const getlocations = () => {\r\n      axios.get(api + 'api/businesses/' + data.userId).then((response) => {\r\n        setlocations(response.data.data.locations);\r\n        setlocation(response.data.data.locations[0].name);\r\n      });\r\n    };\r\n  \r\n    let locationData = locations.find((location1) => location1.name === location);\r\n    let totalCapacity = 0;\r\n  \r\n    if (locationData) {\r\n      for (let i = 0; i < locationData.vehicleDetails.length; i++) {\r\n        totalCapacity += parseInt(locationData.vehicleDetails[i].capacity);\r\n      }\r\n    }\r\n  \r\n    const baseURL =\r\n      api +\r\n      \"api/parkings/vehicle/tickets?limit=10000&location=\" +\r\n      location;\r\n    // console.log(baseURL);\r\n    const [Tickets, setTickets] = useState([]);\r\n    useEffect(() => {\r\n      getTickets();\r\n    }, [locationData]);\r\n  \r\n    const getTickets = async () => {\r\n      try {\r\n        await axios.get(baseURL).then((response) => {\r\n          if (response.data.message === \"No Records Found!\") {\r\n            setTickets(response.data.data);\r\n          } else {\r\n            setTickets(response.data.data.data);\r\n          }\r\n          // console.log(response);\r\n        });\r\n      } catch (error) {\r\n        console.log('error', error);\r\n      }\r\n    };\r\n\r\n    useEffect(() => {\r\n      if (Tickets) {\r\n        const newCounts = {};\r\n        let temp=0;\r\n        for (let vehicle of Tickets) {\r\n          if (vehicle.parkingStatus === \"PARKED\") {\r\n            temp++;\r\n            if (newCounts[vehicle.vehicleType]) {\r\n              newCounts[vehicle.vehicleType]++;\r\n            } else {\r\n              newCounts[vehicle.vehicleType] = 1;\r\n            }\r\n          }\r\n        }\r\n        settotalcount(temp);\r\n        setCounts(newCounts);\r\n      }\r\n    }, [Tickets]);\r\n\r\n    // console.log(Tickets);\r\n\r\n    const RevenueURL =\r\n    api +\r\n    \"api/businesses/revenue/\"+data.userId+\"?location=\" +\r\n    location;\r\n  // console.log(RevenueURL);\r\n  const [Revenue, setRevenue] = useState([]);\r\n  useEffect(() => {\r\n    getRevenue();\r\n  }, [locationData]);\r\n\r\n  const getRevenue = async () => {\r\n    try {\r\n      await axios.get(RevenueURL).then((response) => {\r\n        // console.log('revuenue',response);\r\n        if (response.data.message === \"No Records Found!\") {\r\n          setRevenue(response.data.data);\r\n        } else {\r\n          setRevenue(response.data.data);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log('error', error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (Revenue) {\r\n      // console.log(Revenue);\r\n      let temp=0;\r\n      for (let ticket of Revenue) {\r\n        temp+=ticket.totalAmount;\r\n      }\r\n      // console.log(temp);\r\n      settotalRevenue(temp);\r\n    }\r\n  }, [Revenue]);\r\n\r\n\r\n    return (\r\n        <Grid container rowSpacing={4.5} columnSpacing={2.75}>\r\n            {/* row 1 */}\r\n            <Grid item xs={12}>\r\n\r\n            <div className=\"formInput\" style={{ display: 'flex', alignItems: 'center' }}>\r\n              <Typography variant=\"h5\">Showing Dashboard for </Typography>\r\n\r\n                <select id=\"locationSelect\" onChange={handlelocation} style={{ marginLeft: '10px' }}>\r\n                    {locations.map((location) => (\r\n                        <option value={location.name}>{location.name}</option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n\r\n            </Grid>\r\n            {locationData &&\r\n                locationData.vehicleDetails.map((vehicle, index) => (\r\n                    <Grid item xs={12} sm={6} md={4} lg={4} key={index}>\r\n                        {counts[vehicle.type] !== undefined ? (\r\n                            <AnalyticEcommerce\r\n                                title={`${vehicle.type}`}\r\n                                count={`${counts[vehicle.type]} / ${vehicle.capacity}`}\r\n                            />\r\n                        ) : null}\r\n                    </Grid>\r\n                ))}\r\n            <Grid item xs={12} md={7} lg={8}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                    <Grid item>\r\n                        <Typography variant=\"h5\">Total Revuenue Generated: {totalRevenue}</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Stack direction=\"row\" alignItems=\"center\" spacing={0}>\r\n                            <Button\r\n                                size=\"small\"\r\n                                onClick={() => setSlot('month')}\r\n                                color={slot === 'month' ? 'primary' : 'secondary'}\r\n                                variant={slot === 'month' ? 'outlined' : 'text'}\r\n                            >\r\n                                Month\r\n                            </Button>\r\n                            <Button\r\n                                size=\"small\"\r\n                                onClick={() => setSlot('week')}\r\n                                color={slot === 'week' ? 'primary' : 'secondary'}\r\n                                variant={slot === 'week' ? 'outlined' : 'text'}\r\n                            >\r\n                                Week\r\n                            </Button>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n                <MainCard content={false} sx={{ mt: 1.5 }}>\r\n                    <Box sx={{ pt: 1, pr: 2 }}>\r\n                    <BusinessChart slot={slot} location={location} />\r\n                    </Box>\r\n                </MainCard>\r\n            </Grid>\r\n            <Grid item xs={12} md={5} lg={4}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                    <Grid item>\r\n                        <Typography variant=\"h5\">Parking Slots Report</Typography>\r\n                    </Grid>\r\n                    <Grid item />\r\n                </Grid>\r\n\r\n                <MainCard sx={{ mt: 2 }} content={false}>\r\n                    {totalCapacity && (<Box sx={{ p: 3, pb: 0 }}>\r\n                        <Stack spacing={2}>\r\n                            <Typography variant=\"h6\" color=\"textSecondary\">\r\n                                Currently\r\n                            </Typography>\r\n                            <Typography variant=\"h3\">{totalcount}/{totalCapacity}</Typography>\r\n                        </Stack>\r\n                    </Box>)}\r\n\r\n                    <div id=\"chart\" style={{ marginBottom: 20 }}>\r\n                        <ReactApexChart options={{ labels: ['Occupied', 'Vacant'], legend: { position: 'bottom' } }} series={[totalcount, totalCapacity - totalcount]} type=\"pie\" width={350} />\r\n                    </div>\r\n                </MainCard>\r\n            </Grid>\r\n                        {/* row 2 */}\r\n                        <Grid item xs={12} md={7} lg={8}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                    <Grid item>\r\n                        <Typography variant=\"h5\">Total Tickets Generated: {Tickets.length}</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Stack direction=\"row\" alignItems=\"center\" spacing={0}>\r\n                            <Button\r\n                                size=\"small\"\r\n                                onClick={() => setSlot('month')}\r\n                                color={slot === 'month' ? 'primary' : 'secondary'}\r\n                                variant={slot === 'month' ? 'outlined' : 'text'}\r\n                            >\r\n                                Month\r\n                            </Button>\r\n                            <Button\r\n                                size=\"small\"\r\n                                onClick={() => setSlot('week')}\r\n                                color={slot === 'week' ? 'primary' : 'secondary'}\r\n                                variant={slot === 'week' ? 'outlined' : 'text'}\r\n                            >\r\n                                Week\r\n                            </Button>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n                <MainCard content={false} sx={{ mt: 1.5 }}>\r\n                    <Box sx={{ pt: 1, pr: 2 }}>\r\n                    <IncomeAreaChart slot={slot} location={location} />\r\n                    </Box>\r\n                </MainCard>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default BusinessDashboard;\r\n","// const baseURL = 'https://parking-management-service-804561330.development.catalystserverless.com/server/parking-management-service/';\r\n// const baseURL = 'http://localhost:5001/';\r\nconst baseURL = '/server/parking-management-service/';\r\n// const baseURL = 'http://parking-clip.com/server/parking-management-service/';\r\n// const baseURL = 'http://192.168.0.103:5001/';\r\n// const baseURL = 'http://localhost:3000/server/parking-management-service/';\r\nexport default baseURL;"],"names":["AnalyticEcommerce","_ref","color","title","count","percentage","isLoss","extra","_jsx","MainCard","contentSX","p","children","_jsxs","Stack","spacing","Typography","variant","Grid","container","alignItems","item","Chip","label","concat","sx","ml","pl","size","defaultProps","areaChartOptions","chart","height","type","toolbar","show","dataLabels","enabled","stroke","curve","width","grid","strokeDashArray","slot","location","theme","useTheme","_theme$palette$text","palette","text","secondary","primary","line","divider","_useState","useState","_useState2","_slicedToArray","options","setOptions","_useState3","name","data","_useState4","series","setSeries","_useState5","_useState6","loading","setLoading","baseURL","api","_useState7","_useState8","Tickets","setTickets","useEffect","getTickets","axios","then","response","error","countByDate","daysArray","countArray","countByMonth","monthsArray","currentDate","Date","weekdays","months","i","date","getFullYear","getMonth","monthOfYear","unshift","forEach","ticket","entryDateTime","undefined","month","push","getDate","dayOfWeek","getDay","day","prevState","_objectSpread","colors","main","xaxis","categories","labels","style","axisBorder","tickAmount","yaxis","borderColor","tooltip","ReactApexChart","JSON","parse","localStorage","getItem","RevenueURL","userId","Revenue","setRevenue","getRevenue","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","message","t0","console","log","stop","apply","arguments","dateParts","split","parseInt","totalAmount","setSlot","locations","setlocations","setlocation","counts","setCounts","_useState9","_useState10","totalcount","settotalcount","_useState11","_useState12","totalRevenue","settotalRevenue","getlocations","locationData","find","location1","totalCapacity","vehicleDetails","length","capacity","_useState13","_useState14","_step","newCounts","temp","_iterator","_createForOfIteratorHelper","s","n","done","vehicle","value","parkingStatus","vehicleType","err","e","f","_useState15","_useState16","_callee2","_context2","_step2","_iterator2","rowSpacing","columnSpacing","xs","className","display","id","onChange","event","target","marginLeft","map","index","sm","md","lg","justifyContent","direction","Button","onClick","content","mt","Box","pt","pr","BusinessChart","pb","marginBottom","legend","position","IncomeAreaChart"],"sourceRoot":""}