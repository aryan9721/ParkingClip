{"version":3,"file":"static/js/325.8ed7576b.chunk.js","mappings":"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","sources":["components/cards/statistics/AnalyticEcommerce.js","pages/AdminDashboard/IncomeAreaChart.js","pages/AdminDashboard/BusinessChart.js","pages/AdminDashboard/index.js","pages/api/index.js"],"sourcesContent":["import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { Chip, Grid, Stack, Typography } from '@mui/material';\r\n\r\n// project import\r\nimport MainCard from '../../../components/MainCard';\r\n\r\n// assets\r\n// import { RiseOutlined, FallOutlined } from '@ant-design/icons';\r\n\r\n// ==============================|| STATISTICS - ECOMMERCE CARD  ||============================== //\r\n\r\nconst AnalyticEcommerce = ({ color, title, count, percentage, isLoss, extra }) => (\r\n    <MainCard contentSX={{ p: 2.25 }}>\r\n        <Stack spacing={0.5}>\r\n            <Typography variant=\"h6\" color=\"textSecondary\">\r\n                {title}\r\n            </Typography>\r\n            <Grid container alignItems=\"center\">\r\n                <Grid item>\r\n                    <Typography variant=\"h4\" color=\"inherit\">\r\n                        {count}\r\n                    </Typography>\r\n                </Grid>\r\n                {percentage && (\r\n                    <Grid item>\r\n                        <Chip\r\n                            variant=\"combined\"\r\n                            color={color}\r\n                            // icon={\r\n                            //     <>\r\n                            //         {!isLoss && <RiseOutlined style={{ fontSize: '0.75rem', color: 'inherit' }} />}\r\n                            //         {isLoss && <FallOutlined style={{ fontSize: '0.75rem', color: 'inherit' }} />}\r\n                            //     </>\r\n                            // }\r\n                            label={`${percentage}%`}\r\n                            sx={{ ml: 1.25, pl: 1 }}\r\n                            size=\"small\"\r\n                        />\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n        </Stack>\r\n        {/* <Box sx={{ pt: 2.25 }}>\r\n            <Typography variant=\"caption\" color=\"textSecondary\">\r\n                You made an extra{' '}\r\n                <Typography component=\"span\" variant=\"caption\" sx={{ color: `${color || 'primary'}.main` }}>\r\n                    {extra}\r\n                </Typography>{' '}\r\n                this year\r\n            </Typography>\r\n        </Box> */}\r\n    </MainCard>\r\n);\r\n\r\nAnalyticEcommerce.propTypes = {\r\n    color: PropTypes.string,\r\n    title: PropTypes.string,\r\n    count: PropTypes.string,\r\n    percentage: PropTypes.number,\r\n    isLoss: PropTypes.bool,\r\n    extra: PropTypes.oneOfType([PropTypes.node, PropTypes.string])\r\n};\r\n\r\nAnalyticEcommerce.defaultProps = {\r\n    color: 'primary'\r\n};\r\n\r\nexport default AnalyticEcommerce;\r\n","import PropTypes from 'prop-types';\r\nimport { useState, useEffect } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// third-party\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport axios from \"axios\";\r\nimport api from '../api';\r\n\r\n// chart options\r\nconst areaChartOptions = {\r\n    chart: {\r\n        height: 450,\r\n        type: 'area',\r\n        toolbar: {\r\n            show: false\r\n        }\r\n    },\r\n    dataLabels: {\r\n        enabled: false\r\n    },\r\n    stroke: {\r\n        curve: 'smooth',\r\n        width: 2\r\n    },\r\n    grid: {\r\n        strokeDashArray: 0\r\n    }\r\n};\r\n\r\n// ==============================|| INCOME AREA CHART ||============================== //\r\n\r\nconst IncomeAreaChart = ({ slot, location, business }) => {\r\n    // console.log(slot,location);\r\n    const theme = useTheme();\r\n    const { primary, secondary } = theme.palette.text;\r\n    const line = theme.palette.divider;\r\n    const [options, setOptions] = useState(areaChartOptions);\r\n    const [series, setSeries] = useState([{ name: 'Tickets Generated', data: [0, 86, 28, 115, 48, 210, 136] }]);\r\n    const [loading, setLoading] = useState(true);\r\n    const baseURL = api +\r\n    \"api/parkings/vehicle/tickets?businessId=\"+ business.businessId+\"&location=\" + location.name;\r\n    // console.log(baseURL);\r\n    const [Tickets, setTickets] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getTickets();\r\n    }, [location]);\r\n\r\n    const getTickets = () => {\r\n        try {\r\n            axios.get(baseURL).then((response) => {\r\n                // console.log('tickets',response);\r\n                setTickets(response.data.data.data);\r\n            });\r\n        } catch (error) {\r\n            // console.log('error',error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (Tickets) {\r\n            const countByDate = {};\r\n            const daysArray = [];\r\n            const countArray = [];\r\n            const countByMonth = {};\r\n            const monthsArray = [];\r\n\r\n            // Create a new Date object for the current date\r\n            const currentDate = new Date();\r\n\r\n            // Array of weekdays to map the day index returned by getDay()\r\n            const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n            if (slot === 'month') {\r\n                const currentDate = new Date();\r\n\r\n                // Array of months to map the month index returned by getMonth()\r\n                const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n\r\n                // Loop through the last 12 months\r\n                for (let i = 0; i < 12; i++) {\r\n                    const date = new Date(currentDate.getFullYear(), currentDate.getMonth() - i, 1);\r\n                    const monthOfYear = months[date.getMonth()];\r\n                    monthsArray.unshift(monthOfYear);\r\n\r\n                    countByMonth[monthOfYear] = 0; // Initialize the count to 0\r\n                }\r\n\r\n                // Loop through the array of tickets and increment the count for each month\r\n                Tickets.forEach(ticket => {\r\n                    const date = new Date(ticket.entryDateTime);\r\n                    const monthOfYear = months[date.getMonth()];\r\n                    if (countByMonth[monthOfYear] !== undefined) {\r\n                        countByMonth[monthOfYear]++;\r\n                    }\r\n                });\r\n\r\n                // Loop through the monthsArray and populate the countArray with the respective counts\r\n                monthsArray.forEach(month => {\r\n                    countArray.push(countByMonth[month]);\r\n                });\r\n\r\n                // console.log(monthsArray);\r\n                // console.log(countArray);\r\n            } else {\r\n                // Loop through the last 6 days\r\n                for (let i = 0; i < 7; i++) {\r\n                    const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() - i);\r\n                    const dayOfWeek = weekdays[date.getDay()];\r\n                    daysArray.unshift(dayOfWeek);\r\n\r\n                    countByDate[dayOfWeek] = 0; // Initialize the count to 0\r\n                }\r\n\r\n                // Loop through the array of tickets and increment the count for each date\r\n                Tickets.forEach(ticket => {\r\n                    const date = new Date(ticket.entryDateTime);\r\n                    const dayOfWeek = weekdays[date.getDay()];\r\n                    if (countByDate[dayOfWeek] !== undefined) {\r\n                        countByDate[dayOfWeek]++;\r\n                    }\r\n                });\r\n\r\n                // Loop through the daysArray and populate the countArray with the respective counts\r\n                daysArray.forEach(day => {\r\n                    countArray.push(countByDate[day]);\r\n                });\r\n\r\n                // console.log(daysArray);\r\n                // console.log(countArray);\r\n\r\n            }\r\n\r\n            setSeries([\r\n                {\r\n                    name: slot === 'month' ? 'Tickets Generated' : 'Tickets Generated (Last 7 days)',\r\n                    data: countArray\r\n                }\r\n            ]);\r\n            setOptions((prevState) => ({\r\n                ...prevState,\r\n                colors: [theme.palette.primary.main, theme.palette.primary[700]],\r\n                xaxis: {\r\n                    categories:\r\n                        slot === 'month'\r\n                            ? monthsArray\r\n                            : daysArray,\r\n                    labels: {\r\n                        style: {\r\n                            colors: [\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary\r\n                            ]\r\n                        }\r\n                    },\r\n                    axisBorder: {\r\n                        show: true,\r\n                        color: line\r\n                    },\r\n                    tickAmount: slot === 'month' ? 11 : 7\r\n                },\r\n                yaxis: {\r\n                    labels: {\r\n                        style: {\r\n                            colors: [secondary]\r\n                        }\r\n                    }\r\n                },\r\n                grid: {\r\n                    borderColor: line\r\n                },\r\n                tooltip: {\r\n                    theme: 'light'\r\n                }\r\n            }));\r\n\r\n            setLoading(false);\r\n        }\r\n    }, [slot, Tickets]);\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return <ReactApexChart options={options} series={series} type=\"area\" height={450} />;\r\n};\r\n\r\n\r\nIncomeAreaChart.propTypes = {\r\n    slot: PropTypes.string\r\n};\r\n\r\nexport default IncomeAreaChart;\r\n","import PropTypes from 'prop-types';\r\nimport { useState, useEffect } from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n// third-party\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport axios from \"axios\";\r\nimport api from '../api';\r\n\r\n// chart options\r\nconst areaChartOptions = {\r\n    chart: {\r\n        height: 450,\r\n        type: 'area',\r\n        toolbar: {\r\n            show: false\r\n        }\r\n    },\r\n    dataLabels: {\r\n        enabled: false\r\n    },\r\n    stroke: {\r\n        curve: 'smooth',\r\n        width: 2\r\n    },\r\n    grid: {\r\n        strokeDashArray: 0\r\n    }\r\n};\r\n\r\n// ==============================|| INCOME AREA CHART ||============================== //\r\n\r\nconst BusinessChart = ({ slot, location,business }) => {\r\n    // console.log(slot,location);\r\n    const theme = useTheme();\r\n    const { primary, secondary } = theme.palette.text;\r\n    const line = theme.palette.divider;\r\n    const [options, setOptions] = useState(areaChartOptions);\r\n    const [series, setSeries] = useState([{ name: 'Revenue Generated', data: [0, 86, 28, 115, 48, 210, 136] }]);\r\n    const [loading, setLoading] = useState(true);\r\n    const data = JSON.parse(localStorage.getItem('userdata'));\r\n    const RevenueURL =\r\n    api +\r\n    \"api/businesses/revenue/\"+business.businessId+\"?location=\" +\r\n    location.name;\r\n  // console.log(RevenueURL);\r\n  const [Revenue, setRevenue] = useState([]);\r\n  useEffect(() => {\r\n    getRevenue();\r\n  }, [location]);\r\n\r\n  const getRevenue = async () => {\r\n    try {\r\n      await axios.get(RevenueURL).then((response) => {\r\n        // console.log('revuenue',response);\r\n        if (response.data.message === \"No Records Found!\") {\r\n          setRevenue(response.data.data);\r\n        } else {\r\n          setRevenue(response.data.data);\r\n        }\r\n      });\r\n    } catch (error) {\r\n      console.log('error', error);\r\n    }\r\n  };\r\n\r\n    useEffect(() => {\r\n        // console.log('revuenue',Revenue);\r\n        if (Revenue) {\r\n            const countByDate = {};\r\n            const daysArray = [];\r\n            const countArray = [];\r\n            const countByMonth = {};\r\n            const monthsArray = [];\r\n\r\n            // Create a new Date object for the current date\r\n            const currentDate = new Date();\r\n\r\n            // Array of weekdays to map the day index returned by getDay()\r\n            const weekdays = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n            if (slot === 'month') {\r\n                const currentDate = new Date();\r\n\r\n                // Array of months to map the month index returned by getMonth()\r\n                const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n\r\n                // Loop through the last 12 months\r\n                for (let i = 0; i < 12; i++) {\r\n                    const date = new Date(currentDate.getFullYear(), currentDate.getMonth() - i, 1);\r\n                    const monthOfYear = months[date.getMonth()];\r\n                    monthsArray.unshift(monthOfYear);\r\n\r\n                    countByMonth[monthOfYear] = 0; // Initialize the count to 0\r\n                }\r\n                // Loop through the array of BusinessChart and increment the count for each month\r\n                Revenue.forEach(ticket => {\r\n                    // const dateString = '19-3-2023';\r\n                    const dateParts = ticket.date.split('-');\r\n                    const month = parseInt(dateParts[1]) - 1; // JavaScript months are zero-indexed\r\n                    // console.log(month); // Output: 2 (March)\r\n                    const monthOfYear = months[month];\r\n                    if (countByMonth[monthOfYear] !== undefined) {\r\n                        countByMonth[monthOfYear]+=ticket.totalAmount;\r\n                    }\r\n                });\r\n\r\n                // Loop through the monthsArray and populate the countArray with the respective counts\r\n                monthsArray.forEach(month => {\r\n                    countArray.push(countByMonth[month]);\r\n                });\r\n\r\n                // console.log(monthsArray);\r\n                // console.log(countArray);\r\n            } else {\r\n                // Loop through the last 6 days\r\n                // console.log(Revenue);\r\n                for (let i = 0; i < 7; i++) {\r\n                    const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() - i);\r\n                    const dayOfWeek = weekdays[date.getDay()];\r\n                    daysArray.unshift(dayOfWeek);\r\n\r\n                    if(Revenue[i]) countByDate[dayOfWeek] = Revenue[i].totalAmount;\r\n                    else countByDate[dayOfWeek] = 0 // Initialize the count to 0\r\n                }\r\n                // console.log(countByDate);\r\n                // Loop through the array of Revenue and increment the count for each date\r\n                // Revenue.forEach(ticket => {\r\n                //     console.log(ticket.day);\r\n                //     console.log(ticket.totalAmount);\r\n                //     // const date = new Date(ticket.date);\r\n                //     // console.log(date);\r\n                //     // const dayOfWeek = weekdays[date.getDay()];\r\n                //     // console.log(dayOfWeek);\r\n                //     if (countByDate[ticket.day] !== undefined) {\r\n                //         countByDate[ticket.day]+=ticket.totalAmount;\r\n                //     }\r\n                // });\r\n                // console.log(countByDate);\r\n                // // Loop through the daysArray and populate the countArray with the respective counts\r\n                daysArray.forEach(day => {\r\n                    countArray.push(countByDate[day]);\r\n                });\r\n\r\n                // console.log(daysArray);\r\n                // console.log(countArray);\r\n\r\n            }\r\n\r\n            setSeries([\r\n                {\r\n                    name: slot === 'month' ? 'Revenue Generated' : 'Revenue Generated (Last 7 days)',\r\n                    data: countArray\r\n                }\r\n            ]);\r\n            setOptions((prevState) => ({\r\n                ...prevState,\r\n                colors: [theme.palette.primary.main, theme.palette.primary[700]],\r\n                xaxis: {\r\n                    categories:\r\n                        slot === 'month'\r\n                            ? monthsArray\r\n                            : daysArray,\r\n                    labels: {\r\n                        style: {\r\n                            colors: [\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary,\r\n                                secondary\r\n                            ]\r\n                        }\r\n                    },\r\n                    axisBorder: {\r\n                        show: true,\r\n                        color: line\r\n                    },\r\n                    tickAmount: slot === 'month' ? 11 : 7\r\n                },\r\n                yaxis: {\r\n                    labels: {\r\n                        style: {\r\n                            colors: [secondary]\r\n                        }\r\n                    }\r\n                },\r\n                grid: {\r\n                    borderColor: line\r\n                },\r\n                tooltip: {\r\n                    theme: 'light'\r\n                }\r\n            }));\r\n\r\n            setLoading(false);\r\n        }\r\n    }, [slot, Revenue]);\r\n\r\n    if (loading) {\r\n        return <div>Loading...</div>;\r\n    }\r\n\r\n    return <ReactApexChart options={options} series={series} type=\"area\" height={450} />;\r\n};\r\n\r\n\r\nBusinessChart.propTypes = {\r\n    slot: PropTypes.string\r\n};\r\n\r\nexport default BusinessChart;\r\n","import { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport api from '../api';\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport menuItem from '../../menu-items';\r\n\r\n// material-ui\r\nimport {\r\n\r\n    Box,\r\n    Button,\r\n    Grid,\r\n\r\n    Stack,\r\n    // TextField,\r\n    Typography\r\n} from '@mui/material';\r\n\r\n\r\nimport IncomeAreaChart from './IncomeAreaChart';\r\nimport BusinessChart from './BusinessChart';\r\n\r\nimport MainCard from '../../components/MainCard';\r\nimport AnalyticEcommerce from '../../components/cards/statistics/AnalyticEcommerce';\r\n\r\n// assets\r\n// import { GiftOutlined, MessageOutlined, SettingOutlined } from '@ant-design/icons';\r\n// import avatar1 from 'assets/images/users/avatar-1.png';\r\n// import avatar2 from 'assets/images/users/avatar-2.png';\r\n// import avatar3 from 'assets/images/users/avatar-3.png';\r\n// import avatar4 from 'assets/images/users/avatar-4.png';\r\n\r\n// // avatar style\r\n// const avatarSX = {\r\n//     width: 36,\r\n//     height: 36,\r\n//     fontSize: '1rem'\r\n// };\r\n\r\n// // action style\r\n// const actionSX = {\r\n//     mt: 0.75,\r\n//     ml: 1,\r\n//     top: 'auto',\r\n//     right: 'auto',\r\n//     alignSelf: 'flex-start',\r\n//     transform: 'none'\r\n// };\r\n\r\n// sales report status\r\n// const status = [\r\n//     {\r\n//         value: 'today',\r\n//         label: 'Today'\r\n//     },\r\n//     {\r\n//         value: 'month',\r\n//         label: 'This Month'\r\n//     },\r\n//     {\r\n//         value: 'year',\r\n//         label: 'This Year'\r\n//     }\r\n// ];\r\n\r\n// ==============================|| DASHBOARD - DEFAULT ||============================== //\r\n\r\nconst AdminDashboard = () => {\r\n    const [slot, setSlot] = useState('week');\r\n    const data = JSON.parse(localStorage.getItem('userdata'));\r\n    const [locations, setlocations] = useState([]);\r\n    const [location, setlocation] = useState('no location found');\r\n    const [businesss, setbusinesss] = useState([]);\r\n    const [business, setbusiness] = useState('no business found');\r\n    const [counts, setCounts] = useState({});\r\n    let [totalcount, settotalcount] =  useState(0);\r\n    let [totalRevenue, settotalRevenue]=useState(0);\r\n    // const [locationData,setlocationData] = useState(null);\r\n    const handlelocation = (event) => {\r\n      const location = JSON.parse(event.target.value);\r\n      // console.log('lox',location);\r\n      setlocation(location);\r\n      // setlocationData(location);\r\n    };\r\n  \r\n    // useEffect(() => {\r\n    //   getlocations();\r\n    // }, [business]);\r\n  \r\n    // const getlocations = () => {\r\n    //   axios.get(api + 'api/businesses/' + business.businessId).then((response) => {\r\n    //     setlocations(response.data.data.locations);\r\n    //     setlocation(response.data.data.locations[0].name);\r\n    //   });\r\n    // };\r\n\r\n\r\n    const handlebusiness = (event) => {\r\n      const business = JSON.parse(event.target.value);\r\n      // console.log(business);\r\n      if (business.locations[0]) {\r\n        setbusiness(business);\r\n        setlocations(business.locations);\r\n        setlocation(business.locations[0]);        \r\n      }\r\n      else\r\n      {\r\n        alert('no location found for Business Selected, Please Reload... ')\r\n      }\r\n    };\r\n  \r\n    useEffect(() => {\r\n      getbusinesss();\r\n    }, []);\r\n  \r\n    const getbusinesss = () => {\r\n      axios.get(api + 'api/businesses').then((response) => {\r\n        // console.log(response.data.data.data);\r\n        setbusinesss(response.data.data.data);\r\n        setbusiness(response.data.data.data[0]);\r\n        setlocations(response.data.data.data[0].locations);\r\n        setlocation(response.data.data.data[0].locations[0]);\r\n      });\r\n    };\r\n    // console.log('locarion',location);\r\n    let locationData = locations.find((location1) => location1.name === location.name);\r\n    // console.log('ld',locationData);\r\n    let totalCapacity = 0;\r\n  \r\n    if (locationData) {\r\n      for (let i = 0; i < locationData.vehicleDetails.length; i++) {\r\n        totalCapacity += parseInt(locationData.vehicleDetails[i].capacity);\r\n      }\r\n    }\r\n    // console.log(locationData);\r\n  //   const baseURL =\r\n  //   api +\r\n  //   \"api/parkings/vehicle/tickets/\"+ business.businessId+\"?location=\" +\r\n  //   location.name;\r\n  // console.log(baseURL);\r\n\r\n  const [Tickets, setTickets] = useState([]);\r\n  useEffect(() => {\r\n    getTickets();\r\n  }, [locationData]);\r\n\r\n  const getTickets = async () => {\r\n    try {\r\n      console.log( api +\r\n        \"api/parkings/vehicle/tickets/\"+ business.businessId+\"?location=\" +\r\n        location.name);\r\n      await axios.get( api +\r\n        \"api/parkings/vehicle/tickets?businessId=\"+ business.businessId+\"&location=\" + location.name).then((response) => {\r\n        if (response.data.message === \"No Records Found!\") {\r\n          setTickets(response.data.data);\r\n        } else {\r\n          setTickets(response.data.data.data);\r\n        }\r\n        // console.log(response);\r\n      });\r\n    } catch (error) {\r\n      console.log('error', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Tickets) {\r\n      const newCounts = {};\r\n      let temp=0;\r\n      for (let vehicle of Tickets) {\r\n        if (vehicle.parkingStatus === \"PARKED\") {\r\n          temp++;\r\n          if (newCounts[vehicle.vehicleType]) {\r\n            newCounts[vehicle.vehicleType]++;\r\n          } else {\r\n            newCounts[vehicle.vehicleType] = 1;\r\n          }\r\n        }\r\n      }\r\n      settotalcount(temp);\r\n      setCounts(newCounts);\r\n    }\r\n  }, [Tickets]);\r\n\r\n  // console.log(Tickets);\r\n\r\n  const RevenueURL =\r\n  api +\r\n  \"api/businesses/revenue/\"+data.userId+\"?location=\" +\r\n  location;\r\n// console.log(RevenueURL);\r\nconst [Revenue, setRevenue] = useState([]);\r\nuseEffect(() => {\r\n  getRevenue();\r\n}, [locationData]);\r\n\r\nconst getRevenue = async () => {\r\n  try {\r\n    await axios.get(RevenueURL).then((response) => {\r\n      // console.log('revuenue',response);\r\n      if (response.data.message === \"No Records Found!\") {\r\n        setRevenue(response.data.data);\r\n      } else {\r\n        setRevenue(response.data.data);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.log('error', error);\r\n  }\r\n};\r\nuseEffect(() => {\r\n  if (Revenue) {\r\n    // console.log(Revenue);\r\n    let temp=0;\r\n    for (let ticket of Revenue) {\r\n      temp+=ticket.totalAmount;\r\n    }\r\n    // console.log(temp);\r\n    settotalRevenue(temp);\r\n  }\r\n}, [Revenue]);\r\n\r\n\r\n    // console.log(locationData);\r\n    return (\r\n        <Grid container rowSpacing={4.5} columnSpacing={2.75}>\r\n            {/* row 1 */}\r\n            <Grid item xs={12}>\r\n\r\n            <div className=\"formInput\" style={{ display: \"flex\", alignItems: \"center\" }}>\r\n            <Typography variant=\"h5\">Dashboard for business: </Typography>\r\n                <select style={{marginLeft: 10, marginRight: 10}} id=\"businessselect\" onChange={handlebusiness}>\r\n                    {/* <option value=\"\">{locations[0].name}</option> */}\r\n                    {businesss.map((bus) => (\r\n                        <option value={JSON.stringify( bus)}>{bus.businessName}</option>\r\n                    ))}\r\n                </select>   \r\n                <Typography variant=\"h5\">At location: </Typography>\r\n\r\n                <select style={{marginLeft: 10}} id=\"locationSelect\" onChange={handlelocation}>\r\n                    {/* <option value=\"\">{locations[0].name}</option> */}\r\n                    {locations.map((location) => (\r\n                        <option value={JSON.stringify(location)}>{location.name}</option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n            </Grid>\r\n            {locationData &&\r\n                locationData.vehicleDetails.map((vehicle, index) => (\r\n                    <Grid item xs={12} sm={6} md={4} lg={4} key={index}>\r\n                        {counts[vehicle.type] !== undefined ? (\r\n                            <AnalyticEcommerce\r\n                                title={`${vehicle.type}`}\r\n                                count={`${counts[vehicle.type]} / ${vehicle.capacity}`}\r\n                            />\r\n                        ) : null}\r\n                    </Grid>\r\n                ))}\r\n            <Grid item xs={12} md={7} lg={8}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                    <Grid item>\r\n                        <Typography variant=\"h5\">Total Revuenue Generated: {totalRevenue}</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Stack direction=\"row\" alignItems=\"center\" spacing={0}>\r\n                            <Button\r\n                                size=\"small\"\r\n                                onClick={() => setSlot('month')}\r\n                                color={slot === 'month' ? 'primary' : 'secondary'}\r\n                                variant={slot === 'month' ? 'outlined' : 'text'}\r\n                            >\r\n                                Month\r\n                            </Button>\r\n                            <Button\r\n                                size=\"small\"\r\n                                onClick={() => setSlot('week')}\r\n                                color={slot === 'week' ? 'primary' : 'secondary'}\r\n                                variant={slot === 'week' ? 'outlined' : 'text'}\r\n                            >\r\n                                Week\r\n                            </Button>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n                <MainCard content={false} sx={{ mt: 1.5 }}>\r\n                    <Box sx={{ pt: 1, pr: 2 }}>\r\n                    <BusinessChart slot={slot} location={location} business={business}/>\r\n                    </Box>\r\n                </MainCard>\r\n            </Grid>\r\n            <Grid item xs={12} md={5} lg={4}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                    <Grid item>\r\n                        <Typography variant=\"h5\">Parking Slots Report</Typography>\r\n                    </Grid>\r\n                    <Grid item />\r\n                </Grid>\r\n\r\n                <MainCard sx={{ mt: 2 }} content={false}>\r\n                    {totalCapacity && (<Box sx={{ p: 3, pb: 0 }}>\r\n                        <Stack spacing={2}>\r\n                            <Typography variant=\"h6\" color=\"textSecondary\">\r\n                                Currently\r\n                            </Typography>\r\n                            <Typography variant=\"h3\">{totalcount}/{totalCapacity}</Typography>\r\n                        </Stack>\r\n                    </Box>)}\r\n\r\n                    <div id=\"chart\" style={{ marginBottom: 20 }}>\r\n                        <ReactApexChart options={{ labels: ['Occupied', 'Vacant'], legend: { position: 'bottom' } }} series={[totalcount, totalCapacity - totalcount]} type=\"pie\" width={350} />\r\n                    </div>\r\n                </MainCard>\r\n            </Grid>\r\n                        {/* row 2 */}\r\n                        <Grid item xs={12} md={7} lg={8}>\r\n                <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n                    <Grid item>\r\n                        <Typography variant=\"h5\">Total Tickets Generated: {Tickets.length}</Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Stack direction=\"row\" alignItems=\"center\" spacing={0}>\r\n                            <Button\r\n                                size=\"small\"\r\n                                onClick={() => setSlot('month')}\r\n                                color={slot === 'month' ? 'primary' : 'secondary'}\r\n                                variant={slot === 'month' ? 'outlined' : 'text'}\r\n                            >\r\n                                Month\r\n                            </Button>\r\n                            <Button\r\n                                size=\"small\"\r\n                                onClick={() => setSlot('week')}\r\n                                color={slot === 'week' ? 'primary' : 'secondary'}\r\n                                variant={slot === 'week' ? 'outlined' : 'text'}\r\n                            >\r\n                                Week\r\n                            </Button>\r\n                        </Stack>\r\n                    </Grid>\r\n                </Grid>\r\n                <MainCard content={false} sx={{ mt: 1.5 }}>\r\n                    <Box sx={{ pt: 1, pr: 2 }}>\r\n                    <IncomeAreaChart slot={slot} location={location} business={business} />\r\n                    </Box>\r\n                </MainCard>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default AdminDashboard;\r\n","// const baseURL = 'https://parking-management-service-804561330.development.catalystserverless.com/server/parking-management-service/';\r\n// const baseURL = 'http://localhost:5001/';\r\nconst baseURL = '/server/parking-management-service/';\r\n// const baseURL = 'http://parking-clip.com/server/parking-management-service/';\r\n// const baseURL = 'http://192.168.0.103:5001/';\r\n// const baseURL = 'http://localhost:3000/server/parking-management-service/';\r\nexport default baseURL;"],"names":["AnalyticEcommerce","_ref","color","title","count","percentage","isLoss","extra","_jsx","MainCard","contentSX","p","children","_jsxs","Stack","spacing","Typography","variant","Grid","container","alignItems","item","Chip","label","concat","sx","ml","pl","size","defaultProps","areaChartOptions","chart","height","type","toolbar","show","dataLabels","enabled","stroke","curve","width","grid","strokeDashArray","slot","location","business","theme","useTheme","_theme$palette$text","palette","text","secondary","primary","line","divider","_useState","useState","_useState2","_slicedToArray","options","setOptions","_useState3","name","data","_useState4","series","setSeries","_useState5","_useState6","loading","setLoading","baseURL","api","businessId","_useState7","_useState8","Tickets","setTickets","useEffect","getTickets","axios","then","response","error","countByDate","daysArray","countArray","countByMonth","monthsArray","currentDate","Date","weekdays","months","i","date","getFullYear","getMonth","monthOfYear","unshift","forEach","ticket","entryDateTime","undefined","month","push","getDate","dayOfWeek","getDay","day","prevState","_objectSpread","colors","main","xaxis","categories","labels","style","axisBorder","tickAmount","yaxis","borderColor","tooltip","ReactApexChart","RevenueURL","JSON","parse","localStorage","getItem","Revenue","setRevenue","getRevenue","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","message","t0","console","log","stop","apply","arguments","dateParts","split","parseInt","totalAmount","setSlot","locations","setlocations","setlocation","businesss","setbusinesss","_useState9","_useState10","setbusiness","_useState11","_useState12","counts","setCounts","_useState13","_useState14","totalcount","settotalcount","_useState15","_useState16","totalRevenue","settotalRevenue","getbusinesss","locationData","find","location1","totalCapacity","vehicleDetails","length","capacity","_useState17","_useState18","_step","newCounts","temp","_iterator","_createForOfIteratorHelper","s","n","done","vehicle","value","parkingStatus","vehicleType","err","e","f","userId","_useState19","_useState20","_callee2","_context2","_step2","_iterator2","rowSpacing","columnSpacing","xs","className","display","marginLeft","marginRight","id","onChange","event","target","alert","map","bus","stringify","businessName","index","sm","md","lg","justifyContent","direction","Button","onClick","content","mt","Box","pt","pr","BusinessChart","pb","marginBottom","legend","position","IncomeAreaChart"],"sourceRoot":""}